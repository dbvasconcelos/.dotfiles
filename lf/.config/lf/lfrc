# File browser settings.

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

set shell zsh
set shellopts '-euy'
set ifs "\n"

set drawbox
set hidden
set scrolloff 10
set icons
set period 1

## Commands

# Directory change listener
cmd on-cd &{{
    # Show current directory in window title
    printf "\033]0; $(pwd | sed "s|$HOME|~|") - lf\007" > /dev/tty
}}

# Open file override
cmd open ${{
    # opens the file in a new window and hide lf while manipulating it
    tdrop -a auto_hide && $OPENER $fx && tdrop -a auto_show
}}

# Create Directory override
cmd mkdir %{{
    IFS=" "
    mkdir -p -- "$*"
    lf -remote "send $id select \"$*\""
}}

# Dynamically set number of columns
cmd recol ${{
    w="$(tput cols)"
    if [ "$w" -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    else
        lf -remote "send $id set ratios 1:2:3"
    fi
}}

# Yank paths to clipboard
cmd yank-path ${{
    printf '%s' "$fx" |
    xclip -i -selection clipboard |
    notify-send -u low "Path(s) copied to clipboard." "$fx"
}}

# Delete Files/Directories
cmd delete ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "delete?[y/N]"
    read ans
    [ $ans = "y" ] && rm -rf -- $fx && notify-send -u low "File(s) deleted." "$fx"
}}

# Create links
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# Extract command
cmd extract ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "extract?[y/N]"
	read ans
	[ $ans = "y" ] && aunpack -- $fx
}}

# Compress command
cmd compress ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	printf "%s\n\t" "$fx"
	printf "compress to: "
    read dest
    packdir="$(basename $dest | cut -d. -f1)"
    mkdir $packdir
    advcp -ga $fx $packdir
    apack $dest $packdir
    rm -rf $packdir
    lf -remote "send $id unselect"
    lf -remote "send $id select \"$dest\""
}}

# Set background
cmd setbg "$1"

# Fzf jump
cmd fzy-jump $lf -remote "send $id select '$(fzf)'"

# Bookmark dir jump
cmd bm-jump $lf -remote "send $id cd $(chooseplace 'Jump to bookmark location')"

## Startup actions
on-cd
recol

## Bindings
map <c-f> fzy-jump
map <c-n> push :mkdir<space>
map <enter> shell
map A rename # at the very end
map r push A<c-u> # new rename
map C compress
map D delete
map E extract
map I push A<c-a> # rename at the very beginning
map J bm-jump
map P :link
map V push :!nvim<space>
map Y yank-path
map X !$f
map a push A<a-b> # rename after extension
map b $setbg $f
map i push A<a-b><a-b><a-f> # rename before extension
map x $$f

# Warning on nested execution
%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"
